{"version":3,"sources":["components/Navbar.js","utils/toast.js","pages/Home.js","pages/Users.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Navbar","className","to","type","id","toast","icon","title","Swal","fire","animation","position","showConfirmButton","timer","timerProgressBar","didOpen","addEventListener","stopTimer","resumeTimer","initialStateForm","UserName","UserEmail","UserPhone","Home","useState","form","setForm","loading","setLoading","onChange","e","target","name","value","onSubmit","preventDefault","fetch","headers","method","body","JSON","stringify","then","response","json","data","error","message","catch","err","autoComplete","placeholder","maxLength","required","minLength","disabled","columns","selector","row","sortable","Users","setData","useEffect","progressPending","pagination","App","exact","path","element","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c9ee9027.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const Navbar = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          Sistemas operativos\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarNav\"\r\n          aria-controls=\"navbarNav\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/usuarios\">\r\n                Usuarios\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n","import Swal from \"sweetalert2\";\r\n\r\nconst toast = ({ icon, title }) => {\r\n  Swal.fire({\r\n    toast: true,\r\n    icon: icon,\r\n    title: title,\r\n    animation: false,\r\n    position: \"bottom\",\r\n    showConfirmButton: false,\r\n    timer: 3000,\r\n    timerProgressBar: true,\r\n    didOpen: (toast) => {\r\n      toast.addEventListener(\"mouseenter\", Swal.stopTimer);\r\n      toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\r\n    },\r\n  });\r\n};\r\n\r\nexport { toast };\r\n","import React, { useState } from \"react\";\r\nimport { toast } from \"../utils/toast\";\r\n\r\nconst initialStateForm = {\r\n  UserName: \"\",\r\n  UserEmail: \"\",\r\n  UserPhone: \"\",\r\n};\r\n\r\nexport const Home = () => {\r\n  const [form, setForm] = useState(initialStateForm);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    fetch(\"http://18.204.18.23/saveUser.php\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n      body: JSON.stringify(form),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data?.error) {\r\n          toast({\r\n            icon: \"error\",\r\n            title: data?.message,\r\n          });\r\n          return;\r\n        }\r\n        setLoading(false);\r\n        setForm(initialStateForm);\r\n        toast({ icon: \"success\", title: data?.message });\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        toast({ icon: \"error\", title: err?.message });\r\n      });\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setForm({ ...form, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Agregar usuario</h1>\r\n      <form onSubmit={onSubmit} autoComplete=\"off\">\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Nombre completo</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Nombre completo\"\r\n            name=\"UserName\"\r\n            maxLength=\"100\"\r\n            value={form?.UserName}\r\n            onChange={onChange}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Teléfono</label>\r\n          <input\r\n            type=\"tel\"\r\n            className=\"form-control\"\r\n            placeholder=\"Teléfono\"\r\n            name=\"UserPhone\"\r\n            minLength=\"7\"\r\n            maxLength=\"7\"\r\n            value={form?.UserPhone}\r\n            onChange={onChange}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Correo electronico</label>\r\n          <input\r\n            type=\"email\"\r\n            className=\"form-control\"\r\n            placeholder=\"Correo electronico\"\r\n            name=\"UserEmail\"\r\n            value={form?.UserEmail}\r\n            onChange={onChange}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"d-grid gap-2\">\r\n          <button type=\"submit\" className=\"btn btn-primary\" disabled={loading}>\r\n            Guardar\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport { toast } from \"../utils/toast\";\r\n\r\nconst columns = [\r\n  {\r\n    name: \"Nombre\",\r\n    selector: (row) => row.UserName,\r\n    sortable: true,\r\n  },\r\n  {\r\n    name: \"Email\",\r\n    selector: (row) => row.UserEmail,\r\n    sortable: true,\r\n  },\r\n  {\r\n    name: \"Teléfono\",\r\n    selector: (row) => row.UserPhone,\r\n    sortable: true,\r\n  },\r\n];\r\n\r\nexport const Users = () => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetch(\"http://18.204.18.23/getUsers.php\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"GET\",\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data?.error) {\r\n          toast({\r\n            icon: \"error\",\r\n            title: data?.message,\r\n          });\r\n          return;\r\n        }\r\n\r\n        setLoading(false);\r\n        setData(data?.data);\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        toast({ icon: \"error\", title: err?.message });\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Lista de usuarios</h1>\r\n      <DataTable columns={columns} data={data} progressPending={loading} pagination />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { Navbar } from \"./components/Navbar\";\nimport { Home } from \"./pages/Home\";\nimport { Users } from \"./pages/Users\";\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <main className=\"container\">\n        <Routes>\n          <Route exact path=\"/\" element={<Home />} />\n          <Route path=\"/usuarios\" element={<Users />} />\n        </Routes>\n      </main>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}